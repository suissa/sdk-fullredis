import { RedisAPIClient } from './index';
import * as dotenv from 'dotenv';

dotenv.config();

/**
 * Exemplo pr√°tico: Sistema de gerenciamento de usu√°rios e sess√µes
 * Demonstra como usar o Redis Full Gateway SDK em um cen√°rio real
 */
async function practicalExample() {
  console.log('üè¢ Exemplo Pr√°tico: Sistema de Usu√°rios e Sess√µes\n');

  const client = new RedisAPIClient({
    baseURL: process.env.API_BASE_URL || 'http://localhost:11912'
  });

  try {
    // Autentica√ß√£o
    await client.authenticate(
      process.env.API_USERNAME || 'suissa',
      process.env.API_PASSWORD || 'Ohlamanoveio666'
    );
    console.log('‚úÖ Conectado ao Redis Full Gateway\n');

    // 1. GERENCIAMENTO DE USU√ÅRIOS
    console.log('üë• === GERENCIAMENTO DE USU√ÅRIOS ===');
    
    // Criar usu√°rios
    const users = [
      { id: '1001', name: 'Jo√£o Silva', email: 'joao@empresa.com', role: 'admin' },
      { id: '1002', name: 'Maria Santos', email: 'maria@empresa.com', role: 'user' },
      { id: '1003', name: 'Pedro Costa', email: 'pedro@empresa.com', role: 'user' }
    ];

    console.log('üìù Criando usu√°rios...');
    for (const user of users) {
      // Armazenar dados do usu√°rio em hash
      await client.hashes.set(`user:${user.id}`, 'name', user.name);
      await client.hashes.set(`user:${user.id}`, 'email', user.email);
      await client.hashes.set(`user:${user.id}`, 'role', user.role);
      await client.hashes.set(`user:${user.id}`, 'created_at', new Date().toISOString());
      
      // Adicionar ao √≠ndice de usu√°rios
      await client.sets.add('users:all', [user.id]);
      await client.sets.add(`users:role:${user.role}`, [user.id]);
      
      console.log(`  ‚úÖ Usu√°rio ${user.name} criado`);
    }
    console.log('');

    // 2. SISTEMA DE SESS√ïES
    console.log('üîê === SISTEMA DE SESS√ïES ===');
    
    // Simular login de usu√°rios
    const sessions = [
      { userId: '1001', sessionId: 'sess_abc123', ip: '192.168.1.100' },
      { userId: '1002', sessionId: 'sess_def456', ip: '192.168.1.101' },
      { userId: '1003', sessionId: 'sess_ghi789', ip: '192.168.1.102' }
    ];

    console.log('üö™ Criando sess√µes de usu√°rios...');
    for (const session of sessions) {
      // Armazenar dados da sess√£o
      await client.hashes.set(`session:${session.sessionId}`, 'user_id', session.userId);
      await client.hashes.set(`session:${session.sessionId}`, 'ip_address', session.ip);
      await client.hashes.set(`session:${session.sessionId}`, 'login_time', new Date().toISOString());
      await client.hashes.set(`session:${session.sessionId}`, 'last_activity', new Date().toISOString());
      
      // Adicionar ao √≠ndice de sess√µes ativas
      await client.sets.add('sessions:active', [session.sessionId]);
      await client.sets.add(`sessions:user:${session.userId}`, [session.sessionId]);
      
      console.log(`  ‚úÖ Sess√£o criada para usu√°rio ${session.userId}`);
    }
    console.log('');

    // 3. SISTEMA DE CACHE DE DADOS
    console.log('üíæ === SISTEMA DE CACHE ===');
    
    // Cache de dados frequentemente acessados
    console.log('üìä Criando cache de estat√≠sticas...');
    await client.hashes.set('cache:stats', 'total_users', users.length.toString());
    await client.hashes.set('cache:stats', 'active_sessions', sessions.length.toString());
    await client.hashes.set('cache:stats', 'last_updated', new Date().toISOString());
    
    // Cache de configura√ß√µes do sistema
    await client.hashes.set('cache:config', 'max_sessions_per_user', '5');
    await client.hashes.set('cache:config', 'session_timeout', '3600');
    await client.hashes.set('cache:config', 'maintenance_mode', 'false');
    
    console.log('  ‚úÖ Cache de estat√≠sticas criado');
    console.log('  ‚úÖ Cache de configura√ß√µes criado');
    console.log('');

    // 4. SISTEMA DE NOTIFICA√á√ïES
    console.log('üì¢ === SISTEMA DE NOTIFICA√á√ïES ===');
    
    // Fila de notifica√ß√µes
    const notifications = [
      'Bem-vindo ao sistema, Jo√£o!',
      'Nova funcionalidade dispon√≠vel',
      'Manuten√ß√£o programada para amanh√£'
    ];
    
    console.log('üì® Adicionando notifica√ß√µes √† fila...');
    await client.lists.pushRight('notifications:queue', notifications);
    
    // Publicar notifica√ß√£o em tempo real
    await client.pubsub.publish('notifications:realtime', {
      type: 'system_alert',
      message: 'Sistema funcionando normalmente',
      timestamp: new Date().toISOString()
    });
    
    console.log('  ‚úÖ Notifica√ß√µes adicionadas √† fila');
    console.log('  ‚úÖ Notifica√ß√£o em tempo real publicada');
    console.log('');

    // 5. ANALYTICS E M√âTRICAS
    console.log('üìà === ANALYTICS E M√âTRICAS ===');
    
    // Contadores de atividade
    console.log('üìä Registrando m√©tricas de atividade...');
    
    // Usar HyperLogLog para contagem √∫nica de visitantes
    const visitors = ['user1001', 'user1002', 'user1003', 'user1001', 'user1002']; // user1001 e 1002 duplicados
    await client.hyperloglogs.add('analytics:unique_visitors:today', visitors);
    
    // Usar bitmaps para tracking de atividade di√°ria
    await client.bitmaps.setBit('analytics:daily_active:20251021', 1001, 1); // Jo√£o ativo
    await client.bitmaps.setBit('analytics:daily_active:20251021', 1002, 1); // Maria ativa
    await client.bitmaps.setBit('analytics:daily_active:20251021', 1003, 0); // Pedro inativo
    
    console.log('  ‚úÖ M√©tricas de visitantes √∫nicos registradas');
    console.log('  ‚úÖ Bitmap de atividade di√°ria criado');
    console.log('');

    // 6. CONSULTAS E RELAT√ìRIOS
    console.log('üìã === CONSULTAS E RELAT√ìRIOS ===');
    
    // Obter todos os usu√°rios
    const allUserIds = await client.sets.getMembers('users:all');
    console.log(`üë• Total de usu√°rios: ${allUserIds.length}`);
    
    // Obter usu√°rios por role
    const adminUsers = await client.sets.getMembers('users:role:admin');
    const regularUsers = await client.sets.getMembers('users:role:user');
    console.log(`üëë Administradores: ${adminUsers.length}`);
    console.log(`üë§ Usu√°rios regulares: ${regularUsers.length}`);
    
    // Obter sess√µes ativas
    const activeSessions = await client.sets.getMembers('sessions:active');
    console.log(`üîê Sess√µes ativas: ${activeSessions.length}`);
    
    // Obter estat√≠sticas do cache
    const stats = await client.hashes.getAll('cache:stats');
    console.log('üìä Estat√≠sticas em cache:', stats);
    
    // Obter contagem de visitantes √∫nicos
    const uniqueVisitors = await client.hyperloglogs.count(['analytics:unique_visitors:today']);
    console.log(`üëÅÔ∏è  Visitantes √∫nicos hoje: ${uniqueVisitors}`);
    
    // Obter usu√°rios ativos hoje
    const activeUsersToday = await client.bitmaps.count('analytics:daily_active:20251021');
    console.log(`üéØ Usu√°rios ativos hoje: ${activeUsersToday}`);
    
    // Obter notifica√ß√µes pendentes
    const pendingNotifications = await client.lists.getRange('notifications:queue', 0, -1);
    console.log(`üì¨ Notifica√ß√µes pendentes: ${pendingNotifications.length}`);
    console.log('');

    // 7. OPERA√á√ïES EM LOTE (PIPELINE)
    console.log('‚ö° === OPERA√á√ïES EM LOTE ===');
    
    console.log('üîÑ Executando opera√ß√µes em pipeline...');
    const batchOperations = [
      { command: 'hset', args: ['batch:operation1', 'status', 'completed'] },
      { command: 'hset', args: ['batch:operation2', 'status', 'pending'] },
      { command: 'sadd', args: ['batch:processed', 'op1', 'op2'] },
      { command: 'lpush', args: ['batch:log', 'Opera√ß√£o em lote executada'] }
    ];
    
    const batchResults = await client.pipelining.exec(batchOperations);
    console.log(`  ‚úÖ ${batchResults.length} opera√ß√µes executadas em lote`);
    console.log('');

    // 8. LIMPEZA E MANUTEN√á√ÉO
    console.log('üßπ === LIMPEZA E MANUTEN√á√ÉO ===');
    
    console.log('üóëÔ∏è  Simulando limpeza de sess√µes expiradas...');
    // Em um cen√°rio real, voc√™ verificaria timestamps e removeria sess√µes antigas
    
    console.log('üìä Atualizando estat√≠sticas finais...');
    await client.hashes.set('cache:stats', 'last_maintenance', new Date().toISOString());
    await client.hashes.set('cache:stats', 'system_status', 'healthy');
    
    console.log('  ‚úÖ Manuten√ß√£o conclu√≠da');
    console.log('');

    console.log('üéâ Exemplo pr√°tico conclu√≠do com sucesso!');
    console.log('');
    console.log('üìã Resumo do que foi demonstrado:');
    console.log('  ‚úÖ Gerenciamento de usu√°rios com hashes');
    console.log('  ‚úÖ Sistema de sess√µes e autentica√ß√£o');
    console.log('  ‚úÖ Cache de dados e configura√ß√µes');
    console.log('  ‚úÖ Sistema de notifica√ß√µes com listas e pub/sub');
    console.log('  ‚úÖ Analytics com HyperLogLog e bitmaps');
    console.log('  ‚úÖ Consultas e relat√≥rios em tempo real');
    console.log('  ‚úÖ Opera√ß√µes em lote com pipeline');
    console.log('  ‚úÖ Rotinas de manuten√ß√£o');

  } catch (error: any) {
    console.error('‚ùå Erro no exemplo pr√°tico:', error.response?.data || error.message);
  }
}

// Executar exemplo se este arquivo for executado diretamente
if (require.main === module) {
  practicalExample().catch(console.error);
}

export { practicalExample };