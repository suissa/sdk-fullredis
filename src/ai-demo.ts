import { RedisAPIClient } from './index';
import { redisApiConfig } from './config';

/**
 * Demonstra√ß√£o das funcionalidades de IA do SDK
 */
export async function aiSDKDemo() {
  console.log('ü§ñ Demonstra√ß√£o das Funcionalidades de IA do Redis SDK\n');
  
  const client = new RedisAPIClient(redisApiConfig);
  
  try {
    // Autenticar primeiro
    console.log('üîê Autenticando...');
    await client.authenticate('suissa', 'Ohlamanoveio666');
    console.log('‚úÖ Autenticado com sucesso\n');

    // 1. Demonstrar IWant com diferentes prompts
    console.log('=' .repeat(60));
    console.log('üéØ DEMONSTRA√á√ÉO: IWant() - IA Analisa Prompts');
    console.log('=' .repeat(60));

    const prompts = [
      'Quero criar um set com alguns itens',
      'Preciso trabalhar com hash para armazenar dados de usu√°rio',
      'Como fa√ßo para criar uma lista de tarefas?',
      'Quero me autenticar no sistema',
      'Preciso verificar se uma chave existe'
    ];

    for (const prompt of prompts) {
      console.log('\n' + '-'.repeat(50));
      const analysis = await client.IWant(prompt);
      
      // Se h√° workflow sugerido, perguntar se quer executar
      if (analysis.workflow) {
        console.log('\nü§î Quer executar este workflow? Executando automaticamente...\n');
        
        try {
          const results = await client.run(analysis.workflow);
          console.log('üìä Resultados do workflow:', results.length, 'passos executados');
        } catch (error) {
          console.log('‚ö†Ô∏è Alguns passos do workflow falharam (normal em demo)');
        }
      }
    }

    // 2. Demonstrar workflows customizados
    console.log('\n' + '='.repeat(60));
    console.log('üîÑ DEMONSTRA√á√ÉO: run() - Workflows Customizados');
    console.log('=' .repeat(60));

    // Workflow 1: Setup completo de dados
    const setupWorkflow = {
      name: 'Setup Completo de Dados',
      description: 'Configura diferentes tipos de dados no Redis',
      steps: [
        {
          function: 'sets.add',
          params: ['demo-tags', ['redis', 'sdk', 'typescript', 'ai']],
          description: 'Cria set com tags do projeto'
        },
        {
          function: 'hashes.set',
          params: ['demo-config', 'version', '1.0.0'],
          description: 'Define vers√£o na configura√ß√£o'
        },
        {
          function: 'hashes.set',
          params: ['demo-config', 'environment', 'development'],
          description: 'Define ambiente na configura√ß√£o'
        },
        {
          function: 'lists.pushRight',
          params: ['demo-logs', ['Sistema iniciado', 'SDK carregado', 'IA ativada']],
          description: 'Adiciona logs do sistema'
        }
      ]
    };

    console.log('\nüöÄ Executando workflow customizado...');
    const setupResults = await client.run(setupWorkflow);

    // Workflow 2: Verifica√ß√£o de dados
    const verifyWorkflow = {
      name: 'Verifica√ß√£o de Dados',
      description: 'Verifica os dados criados no workflow anterior',
      steps: [
        {
          function: 'sets.getMembers',
          params: ['demo-tags'],
          description: 'Lista todas as tags'
        },
        {
          function: 'sets.count',
          params: ['demo-tags'],
          description: 'Conta quantas tags existem'
        },
        {
          function: 'hashes.getAll',
          params: ['demo-config'],
          description: 'Obt√©m toda a configura√ß√£o'
        },
        {
          function: 'lists.length',
          params: ['demo-logs'],
          description: 'Verifica quantos logs existem'
        },
        {
          function: 'lists.getRange',
          params: ['demo-logs', 0, -1],
          description: 'Lista todos os logs'
        }
      ]
    };

    console.log('\nüîç Executando workflow de verifica√ß√£o...');
    const verifyResults = await client.run(verifyWorkflow);

    // 3. Demonstrar an√°lise inteligente
    console.log('\n' + '='.repeat(60));
    console.log('üß† DEMONSTRA√á√ÉO: An√°lise Inteligente de Cen√°rios');
    console.log('=' .repeat(60));

    const complexPrompts = [
      'Quero criar um sistema de cache para usu√°rios com dados geogr√°ficos',
      'Preciso implementar um sistema de ranking com pontua√ß√µes',
      'Como criar um sistema de notifica√ß√µes em tempo real?',
      'Quero fazer an√°lise de dados √∫nicos com estimativa de cardinalidade'
    ];

    for (const complexPrompt of complexPrompts) {
      console.log('\n' + '-'.repeat(50));
      await client.IWant(complexPrompt);
    }

    // 4. Limpeza
    console.log('\nüßπ Limpando dados de demonstra√ß√£o...');
    const cleanupWorkflow = {
      name: 'Limpeza de Dados',
      description: 'Remove todos os dados criados na demonstra√ß√£o',
      steps: [
        {
          function: 'sets.remove',
          params: ['demo-tags', ['redis', 'sdk', 'typescript', 'ai']],
          description: 'Remove tags do demo'
        },
        {
          function: 'hashes.del',
          params: ['demo-config', ['version', 'environment']],
          description: 'Remove configura√ß√µes do demo'
        }
      ]
    };

    await client.run(cleanupWorkflow);

    console.log('\nüéâ Demonstra√ß√£o das funcionalidades de IA conclu√≠da!');
    console.log('\nüìä Resumo das funcionalidades demonstradas:');
    console.log('   ü§ñ IWant() - An√°lise inteligente de prompts');
    console.log('   üîÑ run() - Execu√ß√£o de workflows');
    console.log('   üß† Sugest√µes autom√°ticas de fun√ß√µes');
    console.log('   üìã Workflows customizados');
    console.log('   üéØ Mapeamento autom√°tico prompt ‚Üí fun√ß√µes');

    return {
      success: true,
      promptsAnalyzed: prompts.length + complexPrompts.length,
      workflowsExecuted: 3,
      aiFeatures: ['IWant', 'run', 'workflow-generation', 'function-mapping']
    };

  } catch (error) {
    console.error('\n‚ùå Erro na demonstra√ß√£o de IA:', error);
    throw error;
  }
}

// Executar se for chamado diretamente
if (require.main === module) {
  aiSDKDemo().catch(console.error);
}