import { RedisAPIClient } from './index';
import { redisApiConfig } from './config';

/**
 * Teste das funcionalidades que sabemos que funcionam
 */
export async function workingSDKTest() {
  console.log('üß™ Teste das Funcionalidades Implementadas\n');
  
  const client = new RedisAPIClient(redisApiConfig);
  
  try {
    // 1. Health Check (rota direta)
    console.log('1Ô∏è‚É£ Testando Health Check...');
    const health = await client.health();
    console.log('   ‚úÖ Health:', health.status);
    
    // 2. Autentica√ß√£o
    console.log('\n2Ô∏è‚É£ Testando Autentica√ß√£o...');
    await client.authenticate('suissa', 'Ohlamanoveio666');
    
    // 3. Perfil do usu√°rio
    console.log('\n3Ô∏è‚É£ Testando Perfil do Usu√°rio...');
    const profile = await client.getProfile();
    console.log('   ‚úÖ Perfil:', profile.username);
    
    // 4. Keys - Exists (sabemos que funciona)
    console.log('\n4Ô∏è‚É£ Testando Keys - Exists...');
    const keyExists = await client.keys.exists(['test-key']);
    console.log('   ‚úÖ Key exists:', keyExists);
    
    // 5. Keys - Type
    console.log('\n5Ô∏è‚É£ Testando Keys - Type...');
    const keyType = await client.keys.type('test-key');
    console.log('   ‚úÖ Key type:', keyType);
    
    // 6. Sets - Todas as opera√ß√µes (sabemos que funcionam)
    console.log('\n6Ô∏è‚É£ Testando Sets...');
    
    // Adicionar membros
    const addResult = await client.sets.add('test-set-sdk', ['member1', 'member2', 'member3']);
    console.log('   ‚úÖ Sets add:', addResult, 'members added');
    
    // Obter membros
    const setMembers = await client.sets.getMembers('test-set-sdk');
    console.log('   ‚úÖ Set members:', setMembers);
    
    // Contar membros
    const setCount = await client.sets.count('test-set-sdk');
    console.log('   ‚úÖ Set count:', setCount);
    
    // Remover um membro
    const removeResult = await client.sets.remove('test-set-sdk', ['member1']);
    console.log('   ‚úÖ Sets remove:', removeResult, 'members removed');
    
    // Verificar membros ap√≥s remo√ß√£o
    const setMembersAfter = await client.sets.getMembers('test-set-sdk');
    console.log('   ‚úÖ Set members after remove:', setMembersAfter);
    
    // 7. Hashes - Testar as novas implementa√ß√µes
    console.log('\n7Ô∏è‚É£ Testando Hashes...');
    
    // Set hash field
    await client.hashes.set('test-hash-sdk', 'field1', 'value1');
    console.log('   ‚úÖ Hash set: field1 = value1');
    
    await client.hashes.set('test-hash-sdk', 'field2', 'value2');
    console.log('   ‚úÖ Hash set: field2 = value2');
    
    // Get hash field
    const hashValue = await client.hashes.get('test-hash-sdk', 'field1');
    console.log('   ‚úÖ Hash get field1:', hashValue);
    
    // Get all hash
    const allHash = await client.hashes.getAll('test-hash-sdk');
    console.log('   ‚úÖ Hash getAll:', allHash);
    
    // 8. Lists - Testar as novas implementa√ß√µes
    console.log('\n8Ô∏è‚É£ Testando Lists...');
    
    // Push right
    const rpushResult = await client.lists.pushRight('test-list-sdk', ['item1', 'item2']);
    console.log('   ‚úÖ List rpush:', rpushResult);
    
    // Push left
    const lpushResult = await client.lists.pushLeft('test-list-sdk', ['item0']);
    console.log('   ‚úÖ List lpush:', lpushResult);
    
    // Get length
    const listLength = await client.lists.length('test-list-sdk');
    console.log('   ‚úÖ List length:', listLength);
    
    // Get range
    const listRange = await client.lists.getRange('test-list-sdk', 0, -1);
    console.log('   ‚úÖ List range:', listRange);
    
    // 9. Limpeza
    console.log('\n9Ô∏è‚É£ Limpando dados de teste...');
    await client.sets.remove('test-set-sdk', setMembersAfter);
    await client.hashes.del('test-hash-sdk', ['field1', 'field2']);
    console.log('   üßπ Dados de teste removidos');
    
    console.log('\nüéâ Teste das funcionalidades implementadas conclu√≠do!');
    console.log('\nüìä Resumo dos testes realizados:');
    console.log('   ‚úÖ Health Check');
    console.log('   ‚úÖ Autentica√ß√£o JWT');
    console.log('   ‚úÖ Perfil do usu√°rio');
    console.log('   ‚úÖ Keys (exists, type)');
    console.log('   ‚úÖ Sets (add, getMembers, count, remove)');
    console.log('   ‚úÖ Hashes (set, get, getAll, del)');
    console.log('   ‚úÖ Lists (pushRight, pushLeft, length, getRange)');
    
    return {
      success: true,
      implementedFeatures: 7,
      totalOperations: 15
    };
    
  } catch (error) {
    console.error('\n‚ùå Erro no teste:', error);
    throw error;
  }
}

// Executar se for chamado diretamente
if (require.main === module) {
  workingSDKTest().catch(console.error);
}