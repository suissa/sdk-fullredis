import { RedisAPIClient } from '../index';
import * as dotenv from 'dotenv';

dotenv.config();

/**
 * Exemplo: Sistema de Notifica√ß√µes
 * Demonstra como usar listas e pub/sub para notifica√ß√µes
 */
async function notificationSystemExample() {
  console.log('üì¢ Exemplo: Sistema de Notifica√ß√µes\n');

  const client = new RedisAPIClient({
    baseURL: process.env.API_BASE_URL || 'http://localhost:11912'
  });

  try {
    // Autentica√ß√£o
    await client.authenticate(
      process.env.API_USERNAME || 'suissa',
      process.env.API_PASSWORD || 'Ohlamanoveio666'
    );
    console.log('‚úÖ Conectado ao Redis Full Gateway\n');

    // 1. FILA DE NOTIFICA√á√ïES
    console.log('üì® Criando fila de notifica√ß√µes...');
    
    const notifications = [
      {
        id: 'notif_001',
        type: 'welcome',
        title: 'Bem-vindo ao sistema!',
        message: 'Sua conta foi criada com sucesso.',
        userId: '1001',
        priority: 'high',
        createdAt: new Date().toISOString()
      },
      {
        id: 'notif_002',
        type: 'system',
        title: 'Nova funcionalidade',
        message: 'Confira as novas funcionalidades dispon√≠veis.',
        userId: '1002',
        priority: 'medium',
        createdAt: new Date().toISOString()
      },
      {
        id: 'notif_003',
        type: 'maintenance',
        title: 'Manuten√ß√£o programada',
        message: 'Sistema em manuten√ß√£o amanh√£ das 2h √†s 4h.',
        userId: 'all',
        priority: 'low',
        createdAt: new Date().toISOString()
      }
    ];
    
    // Adicionar notifica√ß√µes √† fila principal
    await client.lists.pushRight('notifications:queue', notifications);
    
    // Organizar por prioridade
    const highPriority = notifications.filter(n => n.priority === 'high');
    const mediumPriority = notifications.filter(n => n.priority === 'medium');
    const lowPriority = notifications.filter(n => n.priority === 'low');
    
    await client.lists.pushRight('notifications:high', highPriority);
    await client.lists.pushRight('notifications:medium', mediumPriority);
    await client.lists.pushRight('notifications:low', lowPriority);
    
    console.log(`  ‚úÖ ${notifications.length} notifica√ß√µes adicionadas √† fila`);
    console.log(`  üî¥ Alta prioridade: ${highPriority.length}`);
    console.log(`  üü° M√©dia prioridade: ${mediumPriority.length}`);
    console.log(`  üü¢ Baixa prioridade: ${lowPriority.length}`);

    // 2. NOTIFICA√á√ïES POR USU√ÅRIO
    console.log('\nüë§ Organizando notifica√ß√µes por usu√°rio...');
    
    for (const notification of notifications) {
      if (notification.userId !== 'all') {
        // Adicionar √† fila pessoal do usu√°rio
        await client.lists.pushRight(`notifications:user:${notification.userId}`, [notification]);
        
        // Marcar como n√£o lida
        await client.sets.add(`notifications:unread:${notification.userId}`, [notification.id]);
        
        console.log(`  üì¨ Notifica√ß√£o ${notification.id} adicionada para usu√°rio ${notification.userId}`);
      } else {
        // Notifica√ß√£o global - adicionar para todos os usu√°rios
        const allUsers = ['1001', '1002', '1003'];
        for (const userId of allUsers) {
          await client.lists.pushRight(`notifications:user:${userId}`, [notification]);
          await client.sets.add(`notifications:unread:${userId}`, [notification.id]);
        }
        console.log(`  üì¢ Notifica√ß√£o global ${notification.id} enviada para todos os usu√°rios`);
      }
    }

    // 3. PUBLICA√á√ÉO EM TEMPO REAL
    console.log('\n‚ö° Publicando notifica√ß√µes em tempo real...');
    
    // Simular publica√ß√£o de notifica√ß√£o em tempo real
    const realtimeNotification = {
      type: 'system_alert',
      title: 'Sistema funcionando',
      message: 'Todos os servi√ßos est√£o operacionais.',
      timestamp: new Date().toISOString(),
      level: 'info'
    };
    
    await client.pubsub.publish('notifications:realtime', realtimeNotification);
    console.log('  ‚úÖ Notifica√ß√£o em tempo real publicada no canal');
    
    // Publicar notifica√ß√£o espec√≠fica para um usu√°rio
    const userSpecificNotification = {
      type: 'personal',
      title: 'A√ß√£o necess√°ria',
      message: 'Por favor, atualize seu perfil.',
      userId: '1001',
      timestamp: new Date().toISOString()
    };
    
    await client.pubsub.publish('notifications:user:1001', userSpecificNotification);
    console.log('  ‚úÖ Notifica√ß√£o espec√≠fica publicada para usu√°rio 1001');

    // 4. PROCESSAMENTO DE NOTIFICA√á√ïES
    console.log('\n‚öôÔ∏è  Processando fila de notifica√ß√µes...');
    
    // Processar notifica√ß√µes de alta prioridade primeiro
    const highPriorityQueue = await client.lists.getRange('notifications:high', 0, -1);
    console.log(`  üî¥ Processando ${highPriorityQueue.length} notifica√ß√µes de alta prioridade`);
    
    for (const notification of highPriorityQueue) {
      // Simular processamento
      console.log(`    üì§ Enviando: ${notification.title}`);
      
      // Marcar como processada
      await client.sets.add('notifications:processed', [notification.id]);
    }

    // 5. CONSULTA DE NOTIFICA√á√ïES
    console.log('\nüîç Consultando notifica√ß√µes...');
    
    // Obter notifica√ß√µes n√£o lidas de um usu√°rio
    const unreadUser1001 = await client.sets.getMembers('notifications:unread:1001');
    console.log(`üì¨ Usu√°rio 1001 tem ${unreadUser1001.length} notifica√ß√µes n√£o lidas`);
    
    // Obter todas as notifica√ß√µes de um usu√°rio
    const userNotifications = await client.lists.getRange('notifications:user:1001', 0, -1);
    console.log(`üìã Usu√°rio 1001 tem ${userNotifications.length} notifica√ß√µes total`);
    
    // Obter estat√≠sticas da fila
    const totalQueue = await client.lists.getRange('notifications:queue', 0, -1);
    const processedCount = await client.sets.getMembers('notifications:processed');
    
    console.log(`üìä Total na fila: ${totalQueue.length}`);
    console.log(`‚úÖ Processadas: ${processedCount.length}`);

    // 6. MARCAR COMO LIDA
    console.log('\nüëÅÔ∏è  Simulando leitura de notifica√ß√µes...');
    
    // Usu√°rio 1001 l√™ suas notifica√ß√µes
    const userUnread = await client.sets.getMembers('notifications:unread:1001');
    if (userUnread.length > 0) {
      // Marcar primeira notifica√ß√£o como lida
      const firstNotification = userUnread[0];
      await client.sets.remove('notifications:unread:1001', [firstNotification]);
      await client.sets.add('notifications:read:1001', [firstNotification]);
      
      console.log(`  ‚úÖ Notifica√ß√£o ${firstNotification} marcada como lida`);
    }

    // 7. LIMPEZA DE NOTIFICA√á√ïES ANTIGAS
    console.log('\nüßπ Limpeza de notifica√ß√µes antigas...');
    
    // Simular limpeza de notifica√ß√µes antigas (mais de 30 dias)
    const oldNotifications = await client.sets.getMembers('notifications:processed');
    console.log(`üóëÔ∏è  ${oldNotifications.length} notifica√ß√µes processadas para an√°lise de limpeza`);
    
    // Em um cen√°rio real, voc√™ verificaria timestamps e removeria notifica√ß√µes antigas

    // 8. TEMPLATES DE NOTIFICA√á√ÉO
    console.log('\nüìù Criando templates de notifica√ß√£o...');
    
    const templates = {
      welcome: {
        title: 'Bem-vindo, {username}!',
        message: 'Sua conta foi criada com sucesso. Aproveite nossos servi√ßos.',
        type: 'welcome'
      },
      password_reset: {
        title: 'Redefini√ß√£o de senha',
        message: 'Clique no link para redefinir sua senha: {reset_link}',
        type: 'security'
      },
      system_maintenance: {
        title: 'Manuten√ß√£o programada',
        message: 'Sistema em manuten√ß√£o de {start_time} at√© {end_time}.',
        type: 'maintenance'
      }
    };
    
    await client.hashes.set('notification:templates', templates);
    console.log('  ‚úÖ Templates de notifica√ß√£o criados');

    // 9. RELAT√ìRIO DO SISTEMA
    console.log('\nüìã Relat√≥rio do Sistema de Notifica√ß√µes:');
    
    const users = ['1001', '1002', '1003'];
    for (const userId of users) {
      const unread = await client.sets.getMembers(`notifications:unread:${userId}`);
      const read = await client.sets.getMembers(`notifications:read:${userId}`);
      console.log(`  üë§ Usu√°rio ${userId}: ${unread.length} n√£o lidas, ${read.length} lidas`);
    }
    
    const totalProcessed = await client.sets.getMembers('notifications:processed');
    console.log(`  üìä Total processadas: ${totalProcessed.length}`);

    console.log('\nüéâ Exemplo de sistema de notifica√ß√µes conclu√≠do!');
    console.log('\nüí° Funcionalidades demonstradas:');
    console.log('  ‚Ä¢ Fila de notifica√ß√µes com prioridades');
    console.log('  ‚Ä¢ Notifica√ß√µes por usu√°rio');
    console.log('  ‚Ä¢ Publica√ß√£o em tempo real (pub/sub)');
    console.log('  ‚Ä¢ Controle de leitura/n√£o leitura');
    console.log('  ‚Ä¢ Templates de notifica√ß√£o');
    console.log('  ‚Ä¢ Limpeza autom√°tica');

  } catch (error: any) {
    console.error('‚ùå Erro:', error.response?.data || error.message);
  }
}

// Executar exemplo se este arquivo for executado diretamente
if (require.main === module) {
  notificationSystemExample().catch(console.error);
}

export { notificationSystemExample };