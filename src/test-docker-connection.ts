import { RedisAPIClient } from './index';
import * as dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

/**
 * Teste completo de conectividade com o servidor Redis Full Gateway no Docker
 */
async function testDockerConnection() {
  console.log('üê≥ Testando conectividade com Redis Full Gateway no Docker\n');

  const client = new RedisAPIClient({
    baseURL: process.env.API_BASE_URL || 'http://localhost:11912'
  });

  try {
    // 1. Verificar se o servidor est√° rodando
    console.log('üîç Verificando se o servidor est√° online...');
    const health = await client.health();
    console.log('‚úÖ Servidor online:', health);
    
    if (health.redis !== 'connected') {
      console.warn('‚ö†Ô∏è  Redis n√£o est√° conectado no servidor');
      return;
    }
    console.log('');

    // 2. Testar autentica√ß√£o
    console.log('üîê Testando autentica√ß√£o...');
    const username = process.env.API_USERNAME || process.env.DEFAULT_USER || 'suissa';
    const password = process.env.API_PASSWORD || process.env.DEFAULT_PASSWORD || 'Ohlamanoveio666';
    
    console.log(`Tentando login com usu√°rio: ${username}`);
    await client.authenticate(username, password);
    console.log('‚úÖ Autentica√ß√£o bem-sucedida');
    console.log('');

    // 3. Testar opera√ß√µes b√°sicas do Redis
    console.log('üß™ Testando opera√ß√µes b√°sicas do Redis...');
    
    // Teste com Hash
    const testKey = `test:${Date.now()}`;
    await client.hashes.set(testKey, 'docker_test', 'success');
    const value = await client.hashes.get(testKey, 'docker_test');
    console.log(`‚úÖ Hash test: ${testKey} -> ${value}`);
    
    // Teste com Lista
    const listKey = `list:${Date.now()}`;
    await client.lists.pushRight(listKey, ['item1', 'item2', 'item3']);
    const listItems = await client.lists.getRange(listKey, 0, -1);
    console.log(`‚úÖ List test: ${listKey} -> [${listItems.join(', ')}]`);
    
    // Teste com Set
    const setKey = `set:${Date.now()}`;
    await client.sets.add(setKey, ['member1', 'member2', 'member3']);
    const setMembers = await client.sets.getMembers(setKey);
    console.log(`‚úÖ Set test: ${setKey} -> {${setMembers.join(', ')}}`);
    console.log('');

    // 4. Testar funcionalidades avan√ßadas
    console.log('üöÄ Testando funcionalidades avan√ßadas...');
    
    // Pipeline
    const pipelineCommands = [
      { command: 'hset', args: [`pipeline:${Date.now()}`, 'field1', 'value1'] },
      { command: 'hset', args: [`pipeline:${Date.now()}`, 'field2', 'value2'] },
      { command: 'sadd', args: [`pipeline_set:${Date.now()}`, 'member1', 'member2'] }
    ];
    
    const pipelineResults = await client.pipelining.exec(pipelineCommands);
    console.log('‚úÖ Pipeline executado com sucesso:', pipelineResults.length, 'comandos');
    
    // Transa√ß√£o
    const transactionCommands = [
      { command: 'hset', args: [`transaction:${Date.now()}`, 'status', 'pending'] },
      { command: 'hset', args: [`transaction:${Date.now()}`, 'amount', '100'] }
    ];
    
    const transactionResults = await client.transactions.exec(transactionCommands);
    console.log('‚úÖ Transa√ß√£o executada com sucesso:', transactionResults.length, 'comandos');
    console.log('');

    // 5. Testar funcionalidades de IA
    console.log('ü§ñ Testando funcionalidades de IA...');
    const aiSuggestion = await client.IWant('Quero criar um sistema de cache para usu√°rios');
    console.log('‚úÖ IA respondeu:', aiSuggestion.suggestion);
    console.log('Fun√ß√µes sugeridas:', aiSuggestion.functions?.join(', '));
    console.log('');

    // 6. Verificar perfil do usu√°rio
    console.log('üë§ Verificando perfil do usu√°rio...');
    const profile = await client.getProfile();
    console.log('‚úÖ Perfil obtido:', profile.user?.username);
    console.log('Data de cria√ß√£o:', profile.user?.createdAt);
    console.log('');

    // 7. Teste de performance b√°sico
    console.log('‚ö° Teste de performance b√°sico...');
    const startTime = Date.now();
    
    const promises = [];
    for (let i = 0; i < 10; i++) {
      promises.push(client.hashes.set(`perf:${i}`, 'value', `test_${i}`));
    }
    
    await Promise.all(promises);
    const endTime = Date.now();
    console.log(`‚úÖ 10 opera√ß√µes paralelas executadas em ${endTime - startTime}ms`);
    console.log('');

    console.log('üéâ Todos os testes passaram! O SDK est√° funcionando perfeitamente com o Docker.');
    console.log('');
    console.log('üìä Resumo dos testes:');
    console.log('  ‚úÖ Conectividade com servidor');
    console.log('  ‚úÖ Autentica√ß√£o JWT');
    console.log('  ‚úÖ Opera√ß√µes b√°sicas (Hash, List, Set)');
    console.log('  ‚úÖ Pipeline e Transa√ß√µes');
    console.log('  ‚úÖ Funcionalidades de IA');
    console.log('  ‚úÖ Perfil do usu√°rio');
    console.log('  ‚úÖ Performance b√°sica');

  } catch (error: any) {
    console.error('‚ùå Erro durante os testes:', error.response?.data || error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.error('');
      console.error('üí° Dicas para resolver:');
      console.error('  1. Verifique se o Docker est√° rodando');
      console.error('  2. Execute: docker-compose up -d');
      console.error('  3. Verifique se a porta 11912 est√° dispon√≠vel');
    }
    
    if (error.response?.status === 401) {
      console.error('');
      console.error('üí° Problema de autentica√ß√£o:');
      console.error('  1. Verifique as credenciais no .env');
      console.error('  2. Usu√°rio padr√£o:', process.env.DEFAULT_USER || 'suissa');
      console.error('  3. Senha padr√£o:', process.env.DEFAULT_PASSWORD || 'Ohlamanoveio666');
    }
  }
}

// Executar teste se este arquivo for executado diretamente
if (require.main === module) {
  testDockerConnection().catch(console.error);
}

export { testDockerConnection };